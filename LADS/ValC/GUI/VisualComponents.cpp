//---------------------------------------------------------------------------

#include "ExceptionHandler.h"
#include <fmx.h>
#include "Utils.h"


//---------------------------------------------------------------------------

#include <set>

#include "Trace.h"   // then can do trace("...") in constructors/destructors
#include "ConsoleWriter.h"

#include "Utils.h"
#include "WorklistEntriesView.h"
#include "InfoPanels.h"
#include "TSnapshotFrame.h"
#include "VisualComponents.h"

#pragma package(smart_init)

//--------------------- begin TSampleRunPanel functions -----------------------

static inline void ValidCtrCheck(TSampleRunPanel *)
{
	new TSampleRunPanel(NULL);
}

__fastcall TSampleRunPanel::TSampleRunPanel(TComponent *owner)
	: TPanel(owner),
	  barcodePanel(NULL), testsPanel(NULL)
{
	testPanels = new EntryPanelsList();
}

__fastcall TSampleRunPanel::~TSampleRunPanel()
{
	delete testPanels;
	// pointers to panels are taken care of elsewhere
}

//--------------------- end TSampleRunPanel functions -----------------------

//--------------------- begin TBarcodePanel functions -----------------------


/** Used to check that TBarcodePanel does not have any pure virtual functions
  * (uninstantiated abstract functions). Automatically generated by RAD studio
  * as part of the process of creating a new component.
  */
static inline void ValidCtrCheck(TBarcodePanel *)
{
	new TBarcodePanel(NULL,NULL,true);
}


__fastcall TBarcodePanel::~TBarcodePanel()
{
	delete attributes;
	delete ids;
}


__fastcall TBarcodePanel::TBarcodePanel(WorklistEntriesView *g,
										TComponent *Owner,
										bool queued)
	: TPanel(Owner),
	  gui(g)
{
	attributes = new std::map <std::string,std::string>();
	ids = new std::map <std::string,int>();


	// set up the label on which the barcode is displayed
	barcodeLabel = new TLabel(this);

	// position of label is relative to panel
	barcodeLabel->Position->X = gui->param("barcodeLabelOffsetX");
	barcodeLabel->Position->Y = 5;
	barcodeLabel->Text = "[barcode?]";
	barcodeLabel->StyleLookup = "BarcodeLabelStyle";
	barcodeLabel->Parent = this;
	// TKTK later: can move label into style, then remove need for g

	if (queued) {
		StyleLookup = "BarcodeQueuedPanelStyle";
	}
	else {
		StyleLookup = "BarcodePanelStyle";
	}

	Height = gui->param("barcodeHeight");
	Width = gui->param("barcodePanelWidth");
	Visible = true;
	Opacity = 1;

}

/** Sets the barcode label of this panel. (The barcode isn't known on
  * construction, only once the worklist entries are examined.)
  * This should be called before the Parent attribute is set.
  */
void TBarcodePanel::updateBarcode(const std::string & barcode)
{
	barcodeLabel->Text = Utils::str2unicodestr(barcode);
}

/** Makes the the style of the barcode panel looking like the sample run
  * needs attention. This should be called before the Parent attribute is set.
  */
void TBarcodePanel::needsAttention()
{
	StyleLookup = "BarcodeAlertPanelStyle";
}


/** Returns the attribute labelled with the given key, or "" otherwise if
  * no such key exists.
  */
std::string TBarcodePanel::getAttribute(const std::string & key)
{
	return (attributes->count(key)>0) ? (*attributes)[key] : "";
}

/** Returns the attribute labelled with the given key, or "" otherwise if
  * no such key exists.
  */
int TBarcodePanel::getIntAttribute(const std::string & key)
{
	return (ids->count(key)>0) ? (*ids)[key] : 0;
}


/** Records a string attribute for this instance of a sample being tested. */
void TBarcodePanel::setAttribute(const std::string & key, const std::string & value)
{
	(*attributes)[key] = value;
}

/** Records an integer attribute for this instance of a sample being tested. */
void TBarcodePanel::setAttribute(const std::string & key, int value)
{
	(*ids)[key] = value;
}


//--------------------- end TBarcodePanel functions-----------------------

//--------------------- begin TTestPanel functions-----------------------


/** Used to check that TTestPanel does not have any pure virtual functions
  * (uninstantiated abstract functions). Automatically generated by RAD studio
  * as part of the process of creating a new component.
  */
static inline void ValidCtrCheck(TTestPanel *)
{
	new TTestPanel(NULL,NULL,NULL,NULL,NULL,NULL,true);
}


/** Destroys the child components of this panel, including buttons and labels. */
__fastcall TTestPanel::~TTestPanel() {

	delete attributes;
	delete ids;
	delete testNameButton;
	// delete testResultDisplay;
	delete notesButton;
	delete resultButton;
	// check if myActions (if it existed) gets deleted from its parent:
	// if not, delete it here
	// same for other info panels
}


/** Constructs a panel to represent a worklist entry.
  *
  * @param v           the WorklistEntriesView object
  * @param owner       the panel to which this will belong
  * @param testName    the name of the scheduled test for this sample
  * @param tag         the tag that the WorklistEntriesView wants to label it with
  * @param ob          the observer of any action on this panel (like a click)
  * @param queued      true if this represents a queued worklist entry
  */
__fastcall TTestPanel::TTestPanel(WorklistEntriesView *v,
								  TPanel *owner,
								  const std::string & testName,
								  const std::string & testResult,
								  const std::string & label,
								  SnapshotFrameObserver* ob,
								  bool qd)
	: TPanel(owner),
	  testName(testName), testResult(testResult), gui(v), queued(qd),
	  observer(ob), myBasicInfo(NULL), myNotes(NULL),
	  myActions(NULL), clockface(NULL)
{
	attributes = new std::map <std::string,std::string>();
	ids = new std::map <std::string,int>();

	StyleLookup = queued                       // default styles
				  ? "TestQueuedPanelStyle"
				  : "TestResultPanelStyle";
	TagString = Utils::str2unicodestr(label);

	initialiseTestNameButton();
	if (!queued) {
		initialiseNotesButton();
		initialiseResultsButton();
	}
}


// Sets up a button to hold the name of the test.
// This button looks like a label, until the user mouses over,
// then subtle 3d shading appears that makes it look like a button.
void TTestPanel::initialiseTestNameButton()
{
	testNameButton = new TSpeedButton(this);
	testNameButton->StyleLookup = "HalfVisibleButtonStyle";
	testNameButton->Position->X = 2*gui->param("cornerWidth");
	testNameButton->Position->Y = gui->param("testResultY");
	std::string displayText = " " + testName + " ";
	testNameButton->Text = Utils::str2unicodestr(displayText);
	testNameButton->Width = Utils::findTextWidth(displayText);
	testNameButton->HitTest = true;
	testNameButton->OnClick = onClick;
	testNameButton->Parent = this;
}

// Sets up a button for viewing/adding notes, with a default appearance.
void TTestPanel::initialiseNotesButton()
{
	notesButton = new TSpeedButton(this);
	notesButton->StyleLookup = "InvisibleNoteButtonStyle";  // default
	notesButton->Position->X = testNameButton->Position->X
							   + testNameButton->Width
							   - gui->param("notesOffsetLeft");
	notesButton->Position->Y = gui->param("testResultY");
	notesButton->Width = gui->param("notesButtonWidth");
	notesButton->Text = "";
	notesButton->OnClick = onClick;
	notesButton->Parent = this;
}



/** Calculates how wide the left hand side of a TTestPanel would need to be,
  * at minimum, to accommodate the given worklist entry.
  *
  * @return   minimum width for this test panel
  */
int TTestPanel::findPanelLeftWidth()
{
	// Note: this calculation needs to match the code that sets the buttons up
	// (check for both queued and non-queued samples)

	int size = 2*gui->param("cornerWidth");
	size += testNameButton->Width;

	if (!queued) {
		size +=  gui->param("notesButtonWidth")
				- gui->param("notesOffsetLeft");
	}
	/*
	if (!queued) { // result display width incorporates a cornerWidth
		size += TTestPanel::findResultDisplayWidth()
				- gui->param("notesOffsetRight");
	}
	else {
		size += gui->param("cornerWidth"); // leaving a bit of space at the end
	}
	*/
	return size;
}

/** Calculates how wide a TTestPanel would need to be, at minimum,
  * to accommodate the given button widths.
  */
int TTestPanel::findPanelWidth(WorklistEntriesView *v,
							   int maxNameWidth,
							   int maxResultWidth)
{
	int size = 2*v->param("cornerWidth");
	size += maxNameWidth;
	size +=  v->param("notesButtonWidth")
			 - v->param("notesOffsetLeft")
			 - v->param("notesOffsetRight");
	size += maxResultWidth;
	return size;
}



/** Calculates how wide the results label would have to be. */
int TTestPanel::findResultDisplayWidth()
{
	return Utils::findTextWidth(testResult) + gui->param("resultGap");
}

void TTestPanel::initialiseResultsButton()
{
	float yPos = gui->param("testResultY") + gui->param("labelOffsetY");
	if (testResult.length()==0) {  // assume pending
		clockface = new TPanel(this);
		clockface->StyleLookup = "PendingPanelStyle";
		clockface->Position->X = notesButton->Position->X
								 + gui->param("notesButtonWidth")
								 - gui->param("notesOffsetRight");;
		clockface->Position->Y = yPos;
		clockface->Width = 16;   // yes, these are in the style, but if I don't
		clockface->Height = 16;  // put them in, weird things happen
		clockface->Parent = this;
	}
	else {
 		// sets up a button (invisible unless moused over)
		resultButton = new TSpeedButton(this);
		resultButton->StyleLookup = "HalfVisibleFixedButtonStyle";
		// was resultButton->Position->X = this->Width -  findResultDisplayWidth(gui,testResult);
		resultButton->Position->Y = gui->param("testResultY");
		resultButton->Width = findResultDisplayWidth();
		resultButton->Text = testResult.c_str();
		resultButton->HitTest = true;
		resultButton->OnClick = onClick;
    }
}


void TTestPanel::setUpNonLocal()
{ // this sets up a semi-transparent white rounded rectangle in front,
  // which has a kinda faded effect; this is for representing results that
  // got done on another analyser

   // to do: put this onto a style
   screen = new TRectangle(this);
   screen->Fill->Kind = TBrushKind::bkSolid;
   screen->Fill->Color = TAlphaColorRec::White;   // not TColorRec, has no effect
   screen->Stroke->Thickness = 0;

   screen->CornerType = TCornerType::ctRound;
   screen->XRadius = gui->param("cornerWidth");
   screen->YRadius = gui->param("cornerWidth");
   screen->Position->X = 0;
   screen->Position->Y = 0;
   screen->HitTest = false;
   screen->Opacity = 0.5;
   // remaining set up done after width of panel is finalised
}



/** Makes the the style of the barcode panel looking like the sample run
  * needs attention. This should be called before the Parent attribute is set.
  */
void TTestPanel::needsAttention()
{
	StyleLookup = "TestResultActionPanelStyle";
}


//---------------------------------------------------------------------------

/** Brings up a pop-up information panel that shows basic information for this
  * worklist entry. It is called when the name of the test (this is also a
  * button) is clicked on.
  *
  * @param Sender   this will be the test name button that got clicked
  */
void __fastcall TTestPanel::basicInfoClick(TObject *Sender)
{
	// Sender is a TSpeedButton (this I checked)
	TSpeedButton *b = (TSpeedButton *)Sender; // b is the button clicked on
	// b->Parent is a TTestPanel (this I checked too)
	TTestPanel *t = (TTestPanel *)(b->Parent); // t is the test result panel

	if (t->myBasicInfo==NULL) { // there isn't already a pop-up panel here

		gui->popupInfoPanel(t,TInfoPanel::panel_BASIC);
	}
}


/** Brings up a pop-up notes panel that indicates at the test result displayed
  * for this worklist entry. It is called when the little button with a note
  * or notes icon is clicked on, which will only be displayed when the
  * worklist entry has one or more notes attached to its test results.
  *
  * @param Sender   this will be the notes button that got clicked
  */
void __fastcall TTestPanel::notesClick(TObject *Sender)
{
	TSpeedButton *b = (TSpeedButton *)Sender; // b is the button clicked on
	TTestPanel *t = (TTestPanel *)(b->Parent); // t is the test result panel

	if (t->myNotes==NULL) { // there isn't already a pop-up panel here

		gui->popupInfoPanel(t,TInfoPanel::panel_NOTES);
	}
}


void __fastcall TTestPanel::onClick(TObject* sender)
{
	valcui::assertion((sender == testNameButton
					   || sender == notesButton
					   || sender == resultButton),
					  "origin of click not recognised" );

	int i = getIntAttribute("Worklist Id");

	observer->notifySelected(i);

	if (sender == testNameButton) {
		basicInfoClick(sender);
	}
	else if (sender == notesButton) {
		notesClick(sender);
	}
	else {
        resultClick(sender);
    }
}

/** Pops up panel which will display any results and provide facilities for
  * the user to take various actions based on the test result.
  *
  * @param Sender   this will be the result button that got clicked
  */
void __fastcall TTestPanel::resultClick(TObject *Sender)
{
	TSpeedButton *b = (TSpeedButton *)Sender; // b is the button clicked on
	TTestPanel *t = (TTestPanel *)(b->Parent); // t is the test result panel

	if (t->myActions==NULL) { // there isn't already an action panel here
		gui->popupInfoPanel(t,TInfoPanel::panel_ACTION);
	}

} // end of TTestPanel::resultClick

void TTestPanel::setObserver(SnapshotFrameObserver* ob)
{
    observer = ob;
}

/** Comparison relation for sorting the worklist entries included in a
  * sample run. Used to sort the entries in order of test name.
  *
  * @param first   the first worklist entry
  * @param second  the second worklist entry
  * @return        true if the first test's name is alphabetically before
  *                that of the second
  */
bool TTestPanel::goCompare(const TTestPanel * first, const TTestPanel * second)
{
	std::string firstname = first->testName;
	std::string secondname = second->testName;
	return (firstname.compare(secondname)<0);   // firstname < secondname
}


/** Returns true if this TTestPanel has this attribute. */
bool TTestPanel::hasAttribute(const std::string & attr)
{
	return (attributes->count(attr)>0 || ids->count(attr)>0);
}

/** Returns the value for the given attribute, or "" otherwise if
  * no such key exists.
  */
std::string TTestPanel::getAttribute(const std::string & attr)
{
	return (attributes->count(attr)>0) ? (*attributes)[attr] : "";
}

/** Returns the value for the given attribute, or "" otherwise if
  * no such key exists.
  */
int TTestPanel::getIntAttribute(const std::string & key)
{
	return (ids->count(key)>0) ? (*ids)[key] : 0;
}


/** Records a string attribute for this instance of a sample being tested. */
void TTestPanel::setAttribute(const std::string & key, const std::string & value)
{
	(*attributes)[key] = value;
}

/** Records an integer attribute for this instance of a sample being tested. */
void TTestPanel::setAttribute(const std::string & key, int value)
{
	(*ids)[key] = value;
}


//--------------------- end TTestPanel functions-----------------------

