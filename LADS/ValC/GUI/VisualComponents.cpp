//---------------------------------------------------------------------------

#include "ExceptionHandler.h"
#include <fmx.h>
#include "Utils.h"


//---------------------------------------------------------------------------

#include <set>

#include "Trace.h"   // then can do trace("...") in constructors/destructors
#include "ConsoleWriter.h"

#include "Utils.h"
#include "DataContainers.h"
#include "GUImanager.h"
#include "InfoPanels.h"
#include "TSnapshotFrame.h"
#include "VisualComponents.h"

#pragma package(smart_init)

//--------------------- begin TBarcodePanel functions-----------------------


/** Used to check that TBarcodePanel does not have any pure virtual functions
  * (uninstantiated abstract functions). Automatically generated by RAD studio
  * as part of the process of creating a new component.
  */
static inline void ValidCtrCheck(TBarcodePanel *)
{
	new TBarcodePanel(NULL,NULL,NULL,true);
}


__fastcall TBarcodePanel::~TBarcodePanel()
{
}


__fastcall TBarcodePanel::TBarcodePanel(GUImanager *g, TComponent *Owner,
										DSampleRun *s, bool queued)
										: TPanel(Owner),
										  gui(g),
										  sample(s)
{
	sample->setVisual(this);  // link from the sample to here


	// set up the label on which the barcode is displayed
	barcodeLabel = new TLabel(this);

	// position of label is relative to panel
	barcodeLabel->Position->X = gui->param("barcodeLabelOffsetX");
	barcodeLabel->Position->Y = 5;
	barcodeLabel->Text = sample->getBarcode().c_str();
	barcodeLabel->StyleLookup = "BarcodeLabelStyle";
	barcodeLabel->Parent = this;

	if (queued) {
		StyleLookup = "BarcodeQueuedPanelStyle";
	}
	else if (sample->getAttentionNeed()) {
		StyleLookup = "BarcodeAlertPanelStyle";
	}
	else {
		StyleLookup = "BarcodePanelStyle";
	}

	Height = gui->param("barcodeHeight");
	Width = gui->param("barcodePanelWidth");
	Visible = true;
	Opacity = 1;

}

//--------------------- end TBarcodePanel functions-----------------------

//--------------------- begin TTestPanel functions-----------------------


/** Used to check that TTestPanel does not have any pure virtual functions
  * (uninstantiated abstract functions). Automatically generated by RAD studio
  * as part of the process of creating a new component.
  */
static inline void ValidCtrCheck(TTestPanel *)
{
	new TTestPanel(NULL,NULL,NULL,0,true);
}


/** Destroys the child components of this panel, including buttons and labels. */
__fastcall TTestPanel::~TTestPanel() {

	delete testNameButton;
	// delete testResultDisplay;
	delete notesButton;
	delete resultButton;
	// check if myActions (if it existed) gets deleted from its parent:
	// if not, delete it here
	// same for other info panels
}

/** Calculates how wide a TTestPanel would need to be, to accommodate the
  * given worklist entry. Useful for calculating in advance what panel sizes
  * should be used.
  *
  * @param gui     this should be a link to the GUImanager object
  * @param entry   the worklist entry for which the display size is to be calculated
  * @param queued  true when the worklist entry is queued (not active yet)
  * @return        the size the displayed entry would be if displayed as compactly as possible
  */
int TTestPanel::findPanelWidth(GUImanager *gui, DSampleTest *entry, bool queued)
{   // Internally, this calculation needs to match what takes place in
	// setUpTestNameButton(), setUpNotesButton() and setUpResultButton()

	int size = 2*gui->param("cornerWidth");
	size += gui->textWidth(entry->displayTestName)
			- gui->param("notesOffsetLeft")
			+ gui->param("notesButtonWidth");
	if (!queued) {
							// result display width incorporates a cornerWidth
		size += TTestPanel::findResultDisplayWidth(gui,entry->getDefaultResult())
				- gui->param("notesOffsetRight");
	}
	else {
		size += gui->param("cornerWidth"); // leaving space for the end
	}
	// when changing things displayed for queued samples,
	// check setUpQueuedSample() to see that this corresponds
	return size;
}


void TTestPanel::setUpTestNameButton()
{   // sets up a button and label with the name of the test;
	// the button is invisible until the user mouses over

	testNameButton = new TSpeedButton(this);
	testNameButton->StyleLookup = "HalfVisibleButtonStyle";
	testNameButton->Position->X = 2*gui->param("cornerWidth");
	testNameButton->Position->Y = gui->param("testResultY");
	testNameButton->Text = entry->displayTestName.c_str();        // was ""
	testNameButton->Width = gui->textWidth(entry->displayTestName);

	/* Test to see if I can get hold of an internal component of the style:

	TText *t = (TText *)testNameButton->FindStyleResource("text");  // this is null, bother!
	if (t !=NULL) {
		gui->mainForm->StatusLabel->Text = Utils::str2unicodestr("width is " + Utils::int2str(t->Width));
		// doesn't result in anything
	}
	else {
        gui->mainForm->StatusLabel->Text = "'Twas null...";
    }
    */

	testNameButton->HitTest = true;
	testNameButton->OnClick = onClick;
	testNameButton->Parent = this;

}

void TTestPanel::setUpNotesButton()
{	// sets up a button for adding/viewing notes
	// (assumes that the test name button (testNameDisplay)
	// has already been set up)


	// next, set up button for viewing/adding notes
	int n = entry->getNotesQuantity();       // how many notes?
	notesButton = new TSpeedButton(this);
	if (n==0) {
		// button will be invisible, but if you hover over it,
		// it will appear and the user can press it to add a note
		notesButton->StyleLookup = "InvisibleNoteButtonStyle";
	}
	else if (n==1) {
		if (entry->hasManualNote) {
			// button will have a note+pencil icon on it
			notesButton->StyleLookup = "HalfVisibleManualNoteButtonStyle";
		}
		else {
			// button will have a note icon on it
			notesButton->StyleLookup = "HalfVisibleNoteButtonStyle";
		}
	}
	else if (entry->hasManualNote) {
		// button will have an icon depicting two notes + pencil
		notesButton->StyleLookup = "HalfVisibleManualNotesButtonStyle";
	}
	else {
		// button will have an icon depicting two notes
		notesButton->StyleLookup = "HalfVisibleNotesButtonStyle";
	}
	int notesPosX = testNameButton->Position->X
					+ testNameButton->Width - gui->param("notesOffsetLeft");

	notesButton->Position->X = notesPosX;
	notesButton->Position->Y = gui->param("testResultY");
	notesButton->Width = gui->param("notesButtonWidth");
	notesButton->Text = "";
	notesButton->OnClick = onClick;
	notesButton->Parent = this;

}

float TTestPanel::findResultDisplayWidth(GUImanager *gui, std::string res)
{   // calculates the width required for the test result label (res),
	// which is either to fit, or a default size if the label would be small

	int dr = gui->param("defaultResultWidth");
	float w = dr + gui->param("resultGap"); // default label width,
											// to be used for narrow labels
	int r = gui->textWidth(res);
	if (r > dr) {
		// increase width to match
		w = w + (r - dr);
	}
	return w;
}

void TTestPanel::setUpResultButton(bool queued)
{  	// results that exist (but labelled pending) are explicitly treated
	// as completed (this will also display weird statuses in a completed
	// fashion, so long as there are result(s) available)
	displayAsCompleted = (entry->status=='C') || entry->resultExists();

	// figure out what test result should be displayed
	if (queued) {
		testResult = "-";
	}
	else {
		if (displayAsCompleted) {
			testResult = entry->getDefaultResult();
		}
		else if (entry->status=='P') {   // don't display a test result if pending
			testResult = "p"; //tmp
		}
		else { // non-completed, not pending, no result
			testResult = "?";
		}
	}
	float widthResult = findResultDisplayWidth(gui,testResult);
	resultPosX = this->Width - widthResult;
	float yPos = gui->param("testResultY") + gui->param("labelOffsetY");


	if (entry->status=='P') {   // don't display a test result if pending
		clockface = new TPanel(this);
		clockface->StyleLookup = "PendingPanelStyle";
		clockface->Position->X = resultPosX;
		clockface->Position->Y = yPos;
		clockface->Width = 16;   // yes, these are in the style, but if I don't
		clockface->Height = 16;  // put them in, weird things happen
		clockface->Parent = this;
		// testResultDisplay->Visible = false;
	}

	else {
		// sets up a button (invisible unless moused over)
		resultButton = new TSpeedButton(this);
		resultButton->StyleLookup = "HalfVisibleFixedButtonStyle";
		resultButton->Position->X = resultPosX;
		resultButton->Position->Y = gui->param("testResultY");
		resultButton->Width = widthResult;
		resultButton->Text = testResult.c_str();    // was "";
		resultButton->HitTest = true;
		resultButton->OnClick = onClick;
		resultButton->Parent = this;
	}
}


void TTestPanel::setUpNonLocal()
{ // this sets up a semi-transparent white rounded rectangle in front,
  // which has a kinda faded effect; this is for representing results that
  // got done on another analyser

   screen = new TRectangle(this);
   screen->Fill->Kind = TBrushKind::bkSolid;
   screen->Fill->Color = TAlphaColorRec::White;   // not TColorRec, has no effect
   screen->Stroke->Thickness = 0;

   screen->CornerType = TCornerType::ctRound;
   screen->XRadius = gui->param("cornerWidth");
   screen->YRadius = gui->param("cornerWidth");
   screen->Position->X = 0;
   screen->Position->Y = 0;
   screen->HitTest = false;
   screen->Width = Width;
   screen->Height = Height;
   screen->Opacity = 0.5;
   screen->Parent = this;
   screen->BringToFront();
}

void TTestPanel::setUpQueuedSample()
{ // puts child components on a panel displaying a queued worklist entry

	StyleLookup = "TestQueuedPanelStyle";
	Width = gui->param("queuedTestWidth");

	setUpTestNameButton();
	setUpNotesButton();
	// setUpResultDisplay(true);
}

void TTestPanel::setUpSampleResults()
{ // puts child components on a panel displaying an active worklist entry

	if (entry->getAttentionNeed()) {
		StyleLookup = "TestResultActionPanelStyle";
	}
	else {
		StyleLookup = "TestResultPanelStyle";
	}
	Width = gui->param("testResultWidth");

	setUpTestNameButton();
	setUpNotesButton();
	setUpResultButton(false);

	localMachine = entry->locallyPertinent
				   || entry->status=='P'
				   || entry->status=='Q';

	if (!localMachine) {
		setUpNonLocal();
	}

}

/** Constructs a panel to represent the given worklist entry.
  * This sets up its child components, including labels for the test
  * name and result, and buttons for notes, alerts/actions and standard information
  * about a worklist entry and its result(s).
  *
  * The positioning of the buttons and labels is controlled by various
  * parameters from the GUI configuration file, and is as follows:
  *
  * @image html TTestPanel-labels.png "A TTestPanel, with variables listed below and GUI parameters above"
  *
  * @param g        the GUImanager object
  * @param Owner    the panel (within the depiction of a sample run) that will hold this TTestPanel
  * @param d        the worklist entry that this visually represents
  * @param posX     the position from the left that this panel is to be placed at
  * @param queued   true if this worklist entry is queued (not yet put on an analyser)
  */
__fastcall TTestPanel::TTestPanel(GUImanager *g,
								  TPanel *Owner,
								  DSampleTest *d,
								  const int posX,
								  bool queued)
					: TPanel(Owner),
					  myBasicInfo(NULL),
					  myNotes(NULL),
					  myActions(NULL),
					  gui(g),
					  entry(d),   // link from here to the worklist entry
                      observer(NULL)
{
 //	entry->setVisual(this);  // link from the worklist entry to this panel
	prev = NULL;
	next = NULL;
	clockface = NULL;

	Height = gui->param("testResultHeight");
	Position->X = posX;
	Position->Y = 0;
	Opacity = 1;

	// then do various display options according to type of worklist entry
	if (queued) {
		setUpQueuedSample();
	}
	else {
		setUpSampleResults();
	}
	// gui->mainForm->log("...");
	Parent = Owner;

}

//---------------------------------------------------------------------------

/** Brings up a pop-up information panel that shows basic information for this
  * worklist entry. It is called when the name of the test (this is also a
  * button) is clicked on.
  *
  * @param Sender   this will be the test name button that got clicked
  */
void __fastcall TTestPanel::basicInfoClick(TObject *Sender)
{
	// Sender is a TSpeedButton (this I checked)
	TSpeedButton *b = (TSpeedButton *)Sender; // b is the button clicked on
	// b->Parent is a TTestPanel (this I checked too)
	TTestPanel *t = (TTestPanel *)(b->Parent); // t is the test result panel

	if (t->myBasicInfo==NULL) { // there isn't already a pop-up panel here

		gui->popupInfoPanel(t,TInfoPanel::panel_BASIC);
	}

	//	std::string s = "width of name button is "
	//				+ Utils::float2str(testNameButton->Width);
	// gui->mainForm->StatusLabel->Text = Utils::str2unicodestr(s);
} // end of TTestPanel::basicInfoClick


/** Brings up a pop-up notes panel that indicates at the test result displayed
  * for this worklist entry. It is called when the little button with a note
  * or notes icon is clicked on, which will only be displayed when the
  * worklist entry has one or more notes attached to its test results.
  *
  * @param Sender   this will be the notes button that got clicked
  */
void __fastcall TTestPanel::notesClick(TObject *Sender)
{
	TSpeedButton *b = (TSpeedButton *)Sender; // b is the button clicked on
	TTestPanel *t = (TTestPanel *)(b->Parent); // t is the test result panel

	if (t->myNotes==NULL) { // there isn't already a pop-up panel here

		gui->popupInfoPanel(t,TInfoPanel::panel_NOTES);
	}

   //	std::string s = "width of bubble x is "
   //					+ Utils::float2str(this->Width);
   //	gui->mainForm->StatusLabel->Text = Utils::str2unicodestr(s);

} // end of TTestPanel::notesClick


void __fastcall TTestPanel::onClick(TObject* sender)
{
    valcui::assertion( ( sender == testNameButton ) || ( sender == notesButton ) || ( sender == resultButton ), "origin of click not recognised" );

    observer->notifySelected( entry->getWorklistId() );

    if ( sender == testNameButton )
    {
        basicInfoClick( sender );
    }
    else if ( sender == notesButton )
    {
        notesClick( sender );
    }
    else
    {
        resultClick( sender );
    }
}

/** Pops up panel which will display any results and provide facilities for
  * the user to take various actions based on the test result.
  *
  * @param Sender   this will be the result button that got clicked
  */
void __fastcall TTestPanel::resultClick(TObject *Sender)
{
	TSpeedButton *b = (TSpeedButton *)Sender; // b is the button clicked on
	TTestPanel *t = (TTestPanel *)(b->Parent); // t is the test result panel

	if (t->myActions==NULL) { // there isn't already an action panel here
		gui->popupInfoPanel(t,TInfoPanel::panel_ACTION);

		/* For debugging purposes:
		std::string s = "height of TActionPanel is "
					+ Utils::float2str(t->myActions->Height);
		s += ", height of inner area "
			 + Utils::float2str(t->myActions->innerArea->Height)
			 + ", height of main area "
			 + Utils::float2str(t->myActions->mainArea->Height)
			 + ", height of alertListBox "
			 + Utils::float2str(t->myActions->alertListBox->Height);
		gui->mainForm->StatusLabel->Text = Utils::str2unicodestr(s);
		*/
	}

} // end of TTestPanel::resultClick

void TTestPanel::setObserver( SnapshotFrameObserver* o )
{
    observer = o;
}

//--------------------- end TTestPanel functions-----------------------

