//---------------------------------------------------------------------------

#ifndef LogFormH
#define LogFormH
//---------------------------------------------------------------------------
#include <System.Classes.hpp>
#include <FMX.Controls.hpp>
#include <FMX.Forms.hpp>
#include <FMX.Layouts.hpp>
#include <FMX.ListBox.hpp>
#include <FMX.StdCtrls.hpp>
#include <FMX.Types.hpp>

#include <deque>

#include "AcquireCriticalSection.h"
#include "CritSec.h"

#include "Utils.h"
#include "LogManager.h"

//---------------------------------------------------------------------------

/** Represents a message string with some additional characteristics, which
  * will dictate how such a message would get displayed in the logging window.
  */
struct LabelledMessage
{
	int         purpose;        ///< e.g. is it from the GUI or Business Layer?
	bool        highlight;      ///< does it need highlighting?
	std::string message;        ///< the text of the message
};

/** An instance of this thread is used as a message queue for communicating
  * between the logging window, and the threads generated by the logging service
  * from log messages sent to it.
  * The contents of the queue are LabelledMessage objects, messages labelled
  * with some distinguishing characteristics.
  *
  * Methods of this class accessing the queue are critical sections,
  * and these are protected by a lock (paulst::CritSec).
  *
  * For details of how this queue is used for communication between threads,
  * please see the documentation for TloggingForm.
  */
class LogMessageQueue {
	friend class GUIandLogWriter;
public:
	LogMessageQueue();
	~LogMessageQueue();
	void addMsgToQ(const LabelledMessage & lmsg);
	LabelledMessage removeMsgFromQ();
private:
	paulst::CritSec queueLock;       // to make sure that two threads don't try
									 // and execute the critical sections of code
									 // that access the queue at the same time

	std::deque<LabelledMessage> q;   // the message queue itself

	LogMessageQueue(const LogMessageQueue &);             // unimplemented & private
	LogMessageQueue & operator=(const LogMessageQueue &); // for uncopyability
};

//---------------------------------------------------------------------------

/** @file docs-TloggingForm.h
  * This file contains a description of how the logging window works,
  * especially with regards to communication between the various parts
  * making up the logging service. You can find this in the doxygen
  * documentation by looking at the documentation for TloggingForm.
  */

class TloggingForm : public TForm
{
	friend class LogManager;

__published:	// IDE-managed Components
	TLayout *TopLabelsArea;
	TLabel *Label2;
	TLabel *Label3;
	TStyleBook *StyleBook2;
	TLayout *DualPane;
	TListBox *BLlistbox;
	TListBox *GUIlistbox;
	void __fastcall FormResize(TObject *Sender);
	void __fastcall FormCreate(TObject *Sender);

public:
	__fastcall TloggingForm(TComponent* Owner);
	__fastcall ~TloggingForm();

	void __fastcall TloggingForm::processNextMessage();

private:
	int maxLineLength = 65;  // quick and dirty hack, for implementing line
							 // wrapping, since the list items won't

	LogMessageQueue msgQueue; // the message queue for communication between
							  // writing threads generated by the logging service
							  // and GUI updates for the logging window itself


	void addMsgToListBox(const std::string & msg,
						 TListBox *box,
						 bool highlighting);
	void appendMessageToLogWindow(const LabelledMessage & msg);

	void setTitle(const std::string & t);
	void scrollDown(TListBox *box);


};
//---------------------------------------------------------------------------
extern PACKAGE TloggingForm *loggingForm;
//---------------------------------------------------------------------------

#endif
