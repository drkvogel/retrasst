LinkResultToWorklistEntryUpdateSQL:
    update buddy_result_float set cbw_record_no = %d where buddy_result_id = %d

BuddyDatabaseSampleRunIDUpdateSQL:
    update buddy_database set sample_run_id = %d where buddy_sample_id = %d

SampleRunIDQueryString:
    select sample_run_id.nextval

SampleRunInsertSQL:
    insert into sample_run ( run_id, sequence_position, group_id ) values ( %d, %f, %d )

SampleRunGroupIDConnectionString:
    dsn=paulst_brat_64;db=paulst_test4

SampleRunGroupIDSessionReadLockSetting:
    set lockmode session where readlock = nolock

SampleRunGroupIDQueryString:
    select valc_next_id.nextval

QueryForSampleRun:
    select count(*) from sample_run where run_id = %d and closed_when is null

SQLStmtCloseSampleRun:
    update sample_run set closed_when = date('now'), closed_by = %d where run_id = %d


SQLStmtInsertWorklistRelation:
    insert into c_worklist_relation ( rerun_id, parent_id, insert_when, motivation )
    values( %d, %d, date('now'), 'R' )

SQLStmtInsertRerun:
    insert into valc_worklist
    ( record_no, machine_cid, barcode, test_cid, group_id, category_id, sample_id, project_cid, profile_id, profile_name, ts_sequence, status )
    select %d  , machine_cid, barcode, test_cid, group_id, category_id, sample_id, project_cid, profile_id, profile_name, ts_sequence, 'S' 
    from valc_worklist where record_no = %d

SQLStmtNextWorklistID:
select valc_next_id.nextval

LogAllDatabaseStatements:
true

CacheConnections:
true

PendingUpdateWaitTimeoutSecs:
10

RuleEngineTimeoutSecs:
10

QCResultSequenceConnectionString:
dsn=paulst_brat_64;db=paulst_test4

ProjectsConnectionString:
dsn=paulst_brat_64;db=paulst_test4

ProjectsSessionReadLockSetting:
set lockmode session where readlock = nolock

ProjectsQuery:
select project_cid, lower(external_name), lower(db_name) from c_project

ClusterIDsConnectionString:
dsn=paulst_brat_64;db=paulst_test4

ClusterIDsSessionReadLockSetting:
set lockmode session where readlock = nolock

ClusterIDsQuery:
SELECT cluster_cid FROM c_cluster_machine WHERE machine_cid = -1019429

TestNamesConnectionString:
dsn=paulst_brat_64;db=paulst_test4

TestNamesSessionReadLockSetting:
set lockmode session where readlock = nolock

TestNamesQuery:
select test_cid, external_name from c_test

QCGatesConnectionString:
dsn=paulst_brat_64;db=paulst_test4

QCGatesSessionReadLockSetting:
set lockmode session where readlock = nolock

QCGatesQuery:
    select barcode_pattern, mean, stddev, qc_gate.test_cid, qc_gate.record_cid as gate_id, qc_gate.source, qc_lot.qc_status
    from
    qc_gate, qc_lot
    where 
    qc_gate.qc_id = qc_lot.qc_id
    and
    qc_gate.status = 1
    and
    qc_gate.machine_cid = -1019429
    and
    qc_lot.qc_status in ( 0, 1, 2 )

QCRuleConnectionString:
dsn=paulst_brat_64;db=paulst_test4

QCRuleSessionReadLockSetting:
set lockmode session where readlock = nolock

QCRuleQuery:
    select qr.record_cid, qr.rule_cid, con.external_name, con.external_full, qr.script   
    from                                   
    c_object_name con, qc_rule qr          
    where con.object_cid = qr.rule_cid     
    and qr.status = 1                      
    and qr.valid_from < date('now') 
    and qr.valid_to   > date('now')

QCRuleConfigConnectionString:
dsn=paulst_brat_64;db=paulst_test4

QCRuleConfigSessionReadLockSetting:
set lockmode session where readlock = nolock

QCRuleConfigQuery:
    select test_cid, machine_cid, project_cid, rule_cid
    from qc_rule_config
    where 
        status = 1                                
    and valid_from < date('now') 
    and valid_to   > date('now')

InitialisationTimeoutSecs:
5

ConnectionFactoryType:
ADO

ForceReloadConnectionString:
dsn=paulst_brat_64;db=paulst_test4

ForceReloadSessionReadLockSetting:
set lockmode session where readlock = nolock

DBUpdateThreadConnectionString:
dsn=paulst_brat_64;db=paulst_test4

DBUpdateThreadSessionReadLockSetting:

DBUpdateThreadShutdownTimeoutSecs:
5

DBUpdateThreadCancelPendingUpdatesOnShutdown:
true

LoadBuddyDatabase:
    SELECT bd.buddy_sample_id, bd.barcode, bd.date_analysed,       
    bd.database_name, bd.alpha_sample_id, bd.machine_cid,         
    brf.buddy_result_id, brf.test_id, brf.res_value,             
    brf.action_flag, brf.date_analysed, brf.res_text,           
    brf.update_when, brf.cbw_record_no, sr.run_id, NVL2( sr.closed_by, 0, 1 ), 
    sr.created_when, sr.closed_when, sr.sequence_position,     
    NVL( sr.fao_level_one, 'y' ) as fao_level_one, sr.group_id
    FROM                                                     
    (                                                       
        ( buddy_database bd left join buddy_result_float brf  
          on bd.buddy_sample_id = brf.buddy_sample_id )           
        left join sample_run sr on bd.sample_run_id = sr.run_id  
    )                                                           
    WHERE                                                      
    bd.machine_cid = -1019429                                 
    AND                                                      
    ( ( bd.barcode like 'QC%' ) OR ( bd.alpha_sample_id != 0 ) )   
    order by NVL( sr.sequence_position, bd.buddy_sample_id )



BuddyDatabaseInclusionRule:
    --[[                                                          
    function accept ( barcode, dbName, actionFlag, faoLevelOne ) 
        local ok = false    
        if actionFlag == '0' then 
            ok = true 
        elseif actionFlag == 'X' then 
            ok = true 
        end 
        return ok 
    end 
    ]] \n
    function accept ( barcode, dbName, actionFlag ) \n
        -- Note that, if there is no result, actionFlag is '?' \n
        local ok = false
        if ( ( actionFlag == '0' ) or ( actionFlag == '?' ) or ( actionFlag == '1' ) or ( actionFlag == '2' ) ) then ok = true 
        end
        return ok
    end



LoadWorklistEntries:
    SELECT wl.record_no, machine_cid, barcode, test_cid, group_id,
    category_id, sample_id, project_cid,                         
    profile_id, profile_name, time_stamp, ts_sequence, status,  
    diluent, buddy_result_id                                   
    from valc_worklist wl                                     
    WHERE                                                    
    wl.machine_cid in (-1019429, -1019430)                  
    ORDER BY wl.record_no                                 


WorklistInclusionRule:
    --[[
    validStatusValues = { Q = true, P = true, C = true, S = true, W = true, X = true }
    function accept ( barcode, categoryID, projectID, profileID, profileName, status )
        local ok = false
        if validStatusValues[status] then ok = true end
        return ok
    end
    ]] \n
    function accept ( barcode, categoryID, projectID, profileID, profileName, status ) 
        local ok = true
        if status == 'T' then ok = false end
        return ok
    end


WorklistRelationConnectionString:
dsn=paulst_brat_64;db=paulst_test4

WorklistRelationSessionReadLockSetting:
set lockmode session where readlock = nolock

WorklistRelationQuery:
    SELECT wr.parent_id, wr.rerun_id, wr.motivation 
    FROM valc_worklist wl, c_worklist_relation wr                
    WHERE wl.record_no in ( wr.rerun_id, wr.parent_id )         
    and                                                        
    wl.machine_cid in (-1019429, -1019430)                    



RefTempTableName:
Q109Temp



# The following queries both reference a session temporary table.  Results from each are processed IN PARALLEL.                
# A possible problem is that one set of results is not obtained, with the complaint that the session                          
# temporary table is not visible or does not exist. A cause of such a problem is that, behind the scenes, the ODBC           
# driver has created a distinct connection/session.                                                                         
#                                                                                                                          
# Ways of resolving this:                                                                                                 
# 1) Use SysWOW64/odbcad32 to Configure the User Data Source. On the Advanced tab, select 'Cursors' rather than 'Select Loops'.
#                                                                                                                             
# 2) Alternatively, don't use a session temporary table. Use an ordinary table.                                              


LoadReferencedWorklistEntries:
    SELECT wl.record_no, machine_cid, barcode, test_cid, group_id, 
    category_id, sample_id, project_cid,                          
    profile_id, profile_name, time_stamp, ts_sequence, status,   
    diluent, buddy_result_id                                    
    FROM valc_worklist wl, Q109Temp tt                         
    WHERE                                                     
    wl.record_no == tt.record_no                             
    ORDER BY wl.record_no                                   



LoadReferencedWorklistRelations:
    SELECT wl.record_no, wr.rerun_id, wr.parent_id, wr.motivation 
    FROM c_worklist_relation wr, Q109Temp wl                     
    WHERE wl.record_no in ( wr.rerun_id, wr.parent_id )         
    ORDER BY wl.record_no                                      


# Note that there's no point loading non-local results if 
# their corresponding worklist entries aren't getting loaded.
# Thus there is a correspondence between the following query and 
# LoadWorklistEntries.

LoadNonLocalResults:
    SELECT bd.barcode, bd.machine_cid, bd.alpha_sample_id,        
    bd.database_name, brf.buddy_result_id, brf.test_id,          
    brf.res_value, brf.action_flag, brf.date_analysed,          
    brf.res_text, brf.update_when, cbw.record_no,
    cbw.project_cid               
    FROM valc_worklist cbw, buddy_database bd,                
    buddy_result_float brf                              
    WHERE                                                   
    ( (brf.cbw_record_no = cbw.record_no)                  
      or                                                  
      (brf.buddy_result_id = cbw.buddy_result_id)        
    )                                                   
    and brf.buddy_sample_id = bd.buddy_sample_id       
    and bd.machine_cid != -1019429                    
    and cbw.machine_cid in (-1019429, -1019430)      
    and cbw.status in ('Q','P','C','S','W', 'X')    


ExceptionalDataHandler:
    function canProvideProjectIDFor( barcode ) 
        local ok = false
        if ( string.find( barcode, '118' ) == 1 ) then
            ok = true
        end
        return ok
    end
    ---------------------------------------------------------\n
    function getProjectIDFor( barcode ) 
        if ( string.find( barcode, '118' ) ~= 1 ) then
            error( "Cannot identify project ID for barcode " .. barcode )
        end
        return -832455
    end
    ---------------------------------------------------------\n
    function notifyBuddyDatabaseEntryIgnored()
        local continueProcessing = true
        local adviseUser = true
        return continueProcessing, adviseUser
    end
    ---------------------------------------------------------\n
    function notifyCannotAllocateResultToWorklistEntry()
        local continueProcessing = true
        local adviseUser = true
        return continueProcessing, adviseUser
    end
    ---------------------------------------------------------\n
    function notifyWorklistEntryIgnored()
        local continueProcessing = true
        local adviseUser = true
        return continueProcessing, adviseUser
    end
 

