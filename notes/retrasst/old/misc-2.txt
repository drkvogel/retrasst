## Todo

chunk->getStatus() called in showChunks and sgChunksDrawCell - necessary?
look for ??? /newrow
though for last chunk, there is no row after
why can't I inspect chunk?
deferred boxes are not saved as such...
collect empties
put lookAhead into chunk class
notFound() crash
chunk progress not shown at first
	loadVialsWorkerThreadTerminated
		showChunks()
			progressString()
				getProgress()
					rowRel/((float)getSize()
	showChunks should fast forward to first unresolved


showCurrentRow get triggered twice
	sgChunksClick
		showChunk
			showCurrentRow # just once

	skip
		nextRow
			showCurrentRow

	skip
		nextRow
			showChunks
				showChunk
					showCurrentRow

	void    setCurrentRow(int row) { currentRowIdx = row; }
	int     getCurrentRow() { return currentRowIdx; }
	T *     currentRow() { return rowAt(currentRowIdx); }

	void TfrmProcess::showCurrentRow() {
	    SampleRow * sample;
	    int rowIdx = currentChunk()->getCurrentRow();
	    if (rowIdx == currentChunk()->getSize()) {  // ie. past the end, chunk completed
	        sample = NULL;              // no details to show
	        sgVials->Row = rowIdx;      // just show the last row
	    } else {
	        sample = currentChunk()->rowAt(rowIdx);
	        sgVials->Row = rowIdx+1;    // allow for header row
	    }
	    showDetails(sample);
	}


## Done

last chunk crash on statusString
has to iter thru all samples to get status - off the end?
currentRowIdx is now the absolute row index rather than relative
at the start of the second chunk, progress is shown as 91%, 216/237 - 216 is the real position of the first row
reverse changes: end is last row, not one after
in collect, chunk sizes are fubar: 215, 237, 229, 252, 37
	select count(*) from c_box_retrieval br, l_cryovial_retrieval cr where br.rj_box_cid = cr.rj_box_cid and br.section = 1/2/3/4/5
		shows correct(?) sizes per chunk: 400 (200 of both aliquots: -31782,1)
	select count(*) from c_box_retrieval br, l_cryovial_retrieval cr where br.rj_box_cid = cr.rj_box_cid and br.section = 3 and cr.aliquot_type_cid = -31781
		there is the correct (200) number of each aliquot in each chunk of the plan - something is going awry on loading the plan into memory
	the join is probably including extra store records created on previous saves - no
	the plan looks ok 1674 = 2 * 837 rows, chunks of 200
	run /testing/retrasst/is-query-correct/go.sh again -> out.txt -> out.xlsx
	count(*) of big query gives 1674! the query is ok
	rowCount = 217 	when rowCountTemp = 400
	rowCount is wrong
	2ndary aliquot code not right
		assumes aliquots alternate, sometimes they are grouped together
	or sort order not right
		only two types currently (select distinct(aliquot_type_cid) from l_cryovial_retrieval)
		some secondaries must get counted as primaries
		yes, sort by lcr_position, not source_pos - lcr_position is the order they are put in the plan, source_pos *may* be the same order sometimes, but not always, depending on how you sort the plan - previously I had been saving the plan as-is without sorting, and source_pos worked, but recently have been sorting by destination box and position - hence recent funny behaviour. sort by lcr_position and now it's *almost* right - 1st chunk 1 too big, last 1 too small...